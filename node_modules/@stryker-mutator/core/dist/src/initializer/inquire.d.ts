import { Separator } from '@inquirer/prompts';
/**
 * @description Small wrapper around inquire prompts to make it easier to mock in tests
 */
export declare const inquire: {
    select: <Value>(config: {
        message: string;
        choices: readonly (Separator | {
            value: Value;
            name?: string;
            description?: string;
            short?: string;
            disabled?: boolean | string;
            type?: never;
        })[];
        pageSize?: number | undefined;
        loop?: boolean | undefined;
        default?: unknown;
        theme?: import("@inquirer/type").PartialDeep<import("@inquirer/core").Theme<{
            icon: {
                cursor: string;
            };
            style: {
                disabled: (text: string) => string;
                description: (text: string) => string;
            };
            helpMode: "always" | "never" | "auto";
        }>> | undefined;
    }, context?: import("@inquirer/type").Context) => import("@inquirer/type").CancelablePromise<Value>;
    confirm: import("@inquirer/type").Prompt<boolean, {
        message: string;
        default?: boolean;
        transformer?: (value: boolean) => string;
        theme?: import("@inquirer/type").PartialDeep<import("@inquirer/core").Theme>;
    }>;
    input: import("@inquirer/type").Prompt<string, {
        message: string;
        default?: string;
        required?: boolean;
        transformer?: (value: string, { isFinal }: {
            isFinal: boolean;
        }) => string;
        validate?: (value: string) => boolean | string | Promise<string | boolean>;
        theme?: import("@inquirer/type").PartialDeep<import("@inquirer/core").Theme>;
    }>;
    checkbox: <Value>(config: {
        message: string;
        prefix?: string | undefined;
        pageSize?: number | undefined;
        instructions?: (string | boolean) | undefined;
        choices: readonly (Separator | {
            name?: string;
            value: Value;
            short?: string;
            disabled?: boolean | string;
            checked?: boolean;
            type?: never;
        })[];
        loop?: boolean | undefined;
        required?: boolean | undefined;
        validate?: ((choices: readonly {
            name?: string;
            value: Value;
            short?: string;
            disabled?: boolean | string;
            checked?: boolean;
            type?: never;
        }[]) => boolean | string | Promise<string | boolean>) | undefined;
        theme?: import("@inquirer/type").PartialDeep<import("@inquirer/core").Theme<{
            icon: {
                checked: string;
                unchecked: string;
                cursor: string;
            };
            style: {
                disabledChoice: (text: string) => string;
                renderSelectedChoices: <T>(selectedChoices: ReadonlyArray<{
                    name?: string;
                    value: T;
                    short?: string;
                    disabled?: boolean | string;
                    checked?: boolean;
                    type?: never;
                }>, allChoices: ReadonlyArray<{
                    name?: string;
                    value: T;
                    short?: string;
                    disabled?: boolean | string;
                    checked?: boolean;
                    type?: never;
                } | Separator>) => string;
            };
            helpMode: "always" | "never" | "auto";
        }>> | undefined;
    }, context?: import("@inquirer/type").Context) => import("@inquirer/type").CancelablePromise<Value[]>;
    separator: () => Separator;
};
//# sourceMappingURL=inquire.d.ts.map